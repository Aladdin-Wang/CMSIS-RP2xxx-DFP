<?xml version="1.0" encoding="UTF-8"?>

<package schemaVersion="1.3" xmlns:xs="http://www.w3.org/2001/XMLSchema-instance" xs:noNamespaceSchemaLocation="PACK.xsd">
  <name>RP2040_DFP</name>
  <description>Raspberry Pi RP2040 Device Family Pack</description>
  <vendor>Keil</vendor>
  <!-- <license>license.txt</license> -->
  <url>http://www.keil.com/pack/</url>

  <releases>
    <release version="1.0.0-dev0">
      Initial Release.
    </release>
  </releases>

  <keywords>
    <keyword>Raspberry Pi</keyword>
    <keyword>RP2040</keyword>
  </keywords>

  <devices>
    <family Dfamily="Raspberry Pi Devices" Dvendor="RPi:170">

      <subFamily DsubFamily="RP2040 Series">
        <processor Dcore="Cortex-M0+" DcoreVersion="r0p1" Dclock="133000000" Dfpu="NO_FPU" Dmpu="MPU" Dendian="Little-endian" Pname="Core0"/>
        <processor Dcore="Cortex-M0+" DcoreVersion="r0p1" Dclock="133000000" Dfpu="NO_FPU" Dmpu="MPU" Dendian="Little-endian" Pname="Core1"/>
        <book name="Documentation/rp2040-datasheet.pdf" title="RP2040 Data Sheet"/>

        <description>
          Designed by Raspberry Pi, RP2040 features a dual-core Arm Cortex-M0+ processor with 264KB internal RAM and support for up to 16MB of off-chip Flash.
          A wide range of flexible I/O options includes I2C, SPI, and — uniquely — Programmable I/O (PIO).
          These support endless possible applications for this small and affordable package.
        </description>

        <debug svd="CMSIS/SVD/rp2040.svd"/>

        <compile header="CMSIS/Device/RP2040/Include/rp2040.h" define="RP2040"/>

        <debugvars configfile="CMSIS/Debug/rp2040.dbgconf" version="1.0.0">
          // Debug Access Variables, can be modified by user via copies of DBGCONF files as created by uVision. Also see sub-family level.
        </debugvars>

        <sequences>
          <!-- Helper sequences during sequence development, to be removed -->
          <sequence name="ReadPrintDPIDR">
            <block>
              __var value = 0;
              // Read DPIDR
              value = ReadDP(0x0);
              Message(0, "DPIDR: 0x%08X", value);
            </block>
          </sequence>
          <sequence name="ReadPrintRegistersDP">
            <block>
              __var value = 0;
              // Select DP Bank for TARGETID Access
              WriteDP(0x8, 0x2);
              value = ReadDP(0x4);
              Message(0, "TARGETID: 0x%08X", value);
              // Select DP Bank for DLPIDR Access (Instance ID + ProtVSN)
              WriteDP(0x8, 0x3);
              value = ReadDP(0x4);
              Message(0, "DLPIDR: 0x%08X", value);
            </block>
          </sequence>
          <sequence name="LineReset">
            <block>
              // Ensure current debug interface is in reset state
              DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);
              DAP_SWJ_Sequence(3,  0x00);                // At least 2 idle cycles (SWDIO/TMS Low)
            </block>
          </sequence>
          <!-- Helper sequences -->
          <sequence name="Dormant2SWD">
            <block>
              // Ensure current debug interface is in reset state
              DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);
              DAP_SWJ_Sequence(3,  0x00);                // At least 2 idle cycles (SWDIO/TMS Low)

              // At least 8 cycles SWDIO/TMS HIGH
              DAP_SWJ_Sequence(8, 0xFF);

              // Alert Sequence Bits  0.. 63
              DAP_SWJ_Sequence(64, 0x86852D956209F392);

              // Alert Sequence Bits 64..127
              DAP_SWJ_Sequence(64, 0x19BC0EA2E3DDAFE9);

              // 4 cycles SWDIO/TMS LOW + 8-Bit SWD Activation Code (0x1A)
              DAP_SWJ_Sequence(12, 0x1A0);
            </block>
          </sequence>
          <sequence name="SelectCore" Pname="Core0">
            <block>
              // Enter SWD Line Reset State
              DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  // &gt; 50 cycles SWDIO/TMS High
              DAP_SWJ_Sequence(3,  0x00);                // At least 2 idle cycles (SWDIO/TMS Low)

              // DP TARGETSEL Write Request
              DAP_SWJ_Sequence(8, 0x99);

              // 5 Cycles not driven (drive HIGH to match DAP internal pull-up level)
              DAP_SWJ_Sequence(5, 0x1F);

              // Write TARGETSEL Value - Core 0
              DAP_SWJ_Sequence(32, 0x01002927);

              // Parity + 2 idle cycles
              DAP_SWJ_Sequence(3, 0x0);
            </block>
          </sequence>
          <sequence name="SelectCore" Pname="Core1">
            <block>
              // Enter SWD Line Reset State
              DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  // &gt; 50 cycles SWDIO/TMS High
              DAP_SWJ_Sequence(3,  0x00);                // At least 2 idle cycles (SWDIO/TMS Low)

              // DP TARGETSEL Write Request
              DAP_SWJ_Sequence(8, 0x99);

              // 5 Cycles not driven (drive HIGH to match DAP internal pull-up level)
              DAP_SWJ_Sequence(5, 0x1F);

              // Write TARGETSEL Value - Core 1
              DAP_SWJ_Sequence(32, 0x11002927);

              // Parity + 2 idle cycles
              DAP_SWJ_Sequence(3, 0x1);
            </block>
          </sequence>
          <sequence name="SelectRescueDP">
            <block>
              // Enter SWD Line Reset State
              DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  // &gt; 50 cycles SWDIO/TMS High
              DAP_SWJ_Sequence(3,  0x00);                // At least 2 idle cycles (SWDIO/TMS Low)

              // DP TARGETSEL Write Request
              DAP_SWJ_Sequence(8, 0x99);

              // 5 Cycles not driven (drive HIGH to match DAP internal pull-up level)
              DAP_SWJ_Sequence(5, 0x1F);

              // Write TARGETSEL Value - RescueDP
              DAP_SWJ_Sequence(32, 0xF1002927);

              // Parity + 2 idle cycles
              DAP_SWJ_Sequence(3, 0x0);
            </block>
          </sequence>

          <sequence name="DebugPortSetup">
            <block>
              Sequence("Dormant2SWD");
              Sequence("SelectCore");
              // Read DPIDR to enable SWD interface
              ReadDP(0x0);
            </block>
          </sequence>

          <sequence name="DebugDeviceUnlock" info="Read and print DP registers for ID">
            <block>
              Sequence("ReadPrintDPIDR");
              Sequence("ReadPrintRegistersDP");
            </block>
          </sequence>
        </sequences>

        <device Dname="RP2040">
          <memory name="Main_Flash" access="rx"           start="0x00000000" size="0x00008000" default="1" startup="1"/>
          <memory name="SRAM"       access="rwx"          start="0x20000000" size="0x00042000" default="1" init="0"/>

          <!--algorithm name="CMSIS/Flash/RP2040.FLM"  start="0x00000000" size="0x00008000" default="1"/-->

          <!-- feature type="QFP" n="48"/-->
        </device>
      </subFamily>
    </family>
  </devices>


  <conditions>
    <!-- Compiler Conditions -->
    <condition id="ARMCC">
      <accept Tcompiler="ARMCC" Toptions="AC6"/>
    </condition>
    <condition id="GCC">
      <require Tcompiler="GCC"/>
    </condition>

    <!-- Device Conditions -->
    <condition id="RP2040">
      <description>Raspberry PI RP2040 device</description>
      <require Dvendor="RPi:170" Dname="RP2040*"/>
    </condition>

    <!-- Device + CMSIS Conditions -->
    <condition id="RP2040 CMSIS">
      <description>Raspberry PI RP2040 device and CMSIS-CORE</description>
      <require condition="RP2040"/>
      <require Cclass="CMSIS" Cgroup="CORE"/>
    </condition>

  </conditions>

  <components>

    <!-- CMSIS-Startup components -->
    <!-- Cortex-M0+ -->
    <component Cclass="Device" Cgroup="Startup" Cvariant="C Startup" Cversion="1.0.0" condition="RP2040 CMSIS" isDefaultVariant="true">
      <description>System Startup for Raspberry PI RP2040 device</description>
      <RTE_Components_h>
        #define RTE_DEVICE_STARTUP_RP2040    /* Device Startup for RP2040 */
      </RTE_Components_h>

      <files>
        <!-- include folder / device header file -->
        <file category="header"       name="CMSIS/Device/RP2040/Include/rp2040.h"/>

        <!-- startup / linker file -->
        <file category="sourceC"                        name="CMSIS/Device/RP2040/Source/startup_rp2040.c"     version="1.0.0" attr="config"/>
        <file category="linkerScript" condition="ARMCC" name="CMSIS/Device/RP2040/Source/ARM/rp2040.sct"       version="1.0.0" attr="config"/>
        <file category="linkerScript" condition="GCC"   name="CMSIS/Device/RP2040/Source/GCC/gcc_arm.ld"       version="1.0.0" attr="config"/>

        <!-- system file -->
        <file category="sourceC"                        name="CMSIS/Device/RP2040/Source/system_rp2040.c"      version="1.0.0" attr="config"/>
      </files>
    </component>
    <component Cclass="Device" Cgroup="Startup"                      Cversion="1.0.0" condition="RP2040 CMSIS">
      <description>DEPRECATED: System and Startup for Raspberry PI RP2040 device</description>
      <files>
        <!-- include folder / device header file -->
        <file category="header"  name="CMSIS/Device/RP2040/Include/rp2040.h"/>

        <!-- startup / linker file -->
        <file category="sourceAsm"    condition="ARMCC" name="CMSIS/Device/RP2040/Source/ARM/startup_rp2040.S" version="1.0.0" attr="config"/>
        <file category="linkerScript" condition="ARMCC" name="CMSIS/Device/RP2040/Source/ARM/rp2040.sct"       version="1.0.0" attr="config"/>
        <file category="sourceAsm"    condition="GCC"   name="CMSIS/Device/RP2040/Source/GCC/startup_rp2040.S" version="1.0.0" attr="config"/>
        <file category="linkerScript" condition="GCC"   name="CMSIS/Device/RP2040/Source/GCC/gcc_arm.ld"       version="1.0.0" attr="config"/>

        <!-- system file -->
        <file category="sourceC"                        name="CMSIS/Device/RP2040/Source/system_rp2040.c"      version="1.0.0" attr="config"/>
      </files>
    </component>

  </components>

<boards>
  <board vendor="Raspberry Pi" name="Raspberry Pi Pico" revision="Rev. 3" salesContact="https://www.raspberrypi.org/contact/"
           orderForm   ="https://www.raspberrypi.org/products/raspberry-pi-pico/">
    <description>The new flexible $4 microcontroller board from Raspberry Pi</description>
    <image small="Images/RPi_Pico.png" large="Images/RPi_Pico.png" public="true"/>

    <book category="overview"  name="https://www.raspberrypi.org/products/raspberry-pi-pico/" title="Raspberry Pi Pico"/>
    <book category="other"     name="Documentation/Pico-R3-Fritzing.fzpz" title="Fritzing Part" public="true"/>
    <book category="other"     name="Documentation/Pico-R3-step.zip" title="STEP File" public="true"/>
    <book category="setup"     name="Documentation/getting-started-with-pico.pdf" title="Getting Started Guide" public="true"/>
    <book category="manual"    name="Documentation/pico-datasheet.pdf" title="Raspberry Pi Pico Datasheet" public="true"/>
    <book category="schematic" name="Documentation/RPi-Pico-R3-PUBLIC-20200119.zip" title="Schematics" public="true"/>
    <book category="other"     name="Documentation/README.md" title="Guide"/>

    <mountedDevice Dname="RP2040" Dvendor="RPi:170"/>

    <feature type="USB" n="1" name="USB 1.1 with device and host support"/>
    <feature type="DIO" n="26" name="26 × multi-function GPIO pins"/>
    <feature type="TempSens" n="1"/>
    <feature type="SPI" n="2" name=""/>
    <feature type="I2C" n="2" name=""/>
    <feature type="ConnOther" n="2" name="UART"/>
    <feature type="ConnOther" n="3" name="12-bit ADC"/>
    <feature type="ConnOther" n="16" name="PWM Channels"/>
    <feature type="ConnOther" n="8" name="Programmable I/O (PIO) state machines for custom peripheral support"/>

    <debugInterface adapter="JTAG/SW" connector="3-pin SWD I/F"/>
  </board>
</boards>

</package>
