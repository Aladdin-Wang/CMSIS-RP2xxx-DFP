diff --git a/src/rp2_common/hardware_sync/include/hardware/sync.h b/src/rp2_common/hardware_sync/include/hardware/sync.h
index b15f36b..d75f1d6 100644
--- a/src/rp2_common/hardware_sync/include/hardware/sync.h
+++ b/src/rp2_common/hardware_sync/include/hardware/sync.h
@@ -109,6 +109,7 @@ typedef volatile uint32_t spin_lock_t;
 #define PICO_SPINLOCK_ID_CLAIM_FREE_LAST 31
 #endif
 
+#if !__IS_COMPILER_ARM_COMPILER_6__
 /*! \brief Insert a SEV instruction in to the code path.
  *  \ingroup hardware_sync
 
@@ -174,6 +175,7 @@ __force_inline static void __dsb(void) {
 __force_inline static void __isb(void) {
     pico_default_asm_volatile("isb" ::: "memory");
 }
+#endif
 
 /*! \brief Acquire a memory fence
  *  \ingroup hardware_sync
diff --git a/src/rp2_common/pico_cyw43_driver/include/cyw43_configport.h b/src/rp2_common/pico_cyw43_driver/include/cyw43_configport.h
index f012d24..add9064 100644
--- a/src/rp2_common/pico_cyw43_driver/include/cyw43_configport.h
+++ b/src/rp2_common/pico_cyw43_driver/include/cyw43_configport.h
@@ -17,6 +17,10 @@
 extern "C" {
 #endif
 
+#ifndef __uint16_t
+#define __uint16_t uint16_t
+#endif
+
 #ifndef CYW43_HOST_NAME
 #define CYW43_HOST_NAME "PicoW"
 #endif
diff --git a/src/rp2_common/pico_platform/include/pico/platform.h b/src/rp2_common/pico_platform/include/pico/platform.h
index 64b5e96..efc3ea6 100644
--- a/src/rp2_common/pico_platform/include/pico/platform.h
+++ b/src/rp2_common/pico_platform/include/pico/platform.h
@@ -297,6 +297,7 @@ extern "C" {
  */
 #define __no_inline_not_in_flash_func(func_name) __noinline __not_in_flash_func(func_name)
 
+#if !__IS_COMPILER_ARM_COMPILER_6__
 #define __packed_aligned __packed __aligned(4)
 
 /*! \brief Attribute to force inlining of a function regardless of optimization level
@@ -313,6 +314,7 @@ extern "C" {
 #else
 #define __force_inline __always_inline
 #endif
+#endif
 
 /*! \brief Macro to determine the number of elements in an array
  *  \ingroup pico_platform
@@ -484,8 +486,13 @@ static __force_inline uint __get_current_exception(void) {
     return exception;
 }
 
-#define WRAPPER_FUNC(x) __wrap_ ## x
-#define REAL_FUNC(x) __real_ ## x
+#if defined(__IS_COMPILER_ARM_COMPILER_6__)
+    #define WRAPPER_FUNC(__FUNC)     $Sub$$##__FUNC
+    #define REAL_FUNC(__FUNC)        $Super$$## __FUNC
+#else
+    #define WRAPPER_FUNC(x) __wrap_ ## x
+    #define REAL_FUNC(x) __real_ ## x
+#endif
 
 /*! \brief Helper method to busy-wait for at least the given number of cycles
  *  \ingroup pico_platform
diff --git a/src/rp2_common/pico_runtime/runtime.c b/src/rp2_common/pico_runtime/runtime.c
index 144ace1..13e532d 100644
--- a/src/rp2_common/pico_runtime/runtime.c
+++ b/src/rp2_common/pico_runtime/runtime.c
@@ -6,9 +6,11 @@
 
 #include <stdio.h>
 #include <stdarg.h>
+#if !__IS_COMPILER_ARM_COMPILER_6__
 #include <sys/time.h>
 #include <sys/times.h>
 #include <unistd.h>
+#endif
 #include "pico.h"
 
 #include "hardware/regs/m0plus.h"
@@ -90,6 +92,7 @@ void runtime_init(void) {
             RESETS_RESET_USBCTRL_BITS
     ));
 
+#if !__IS_COMPILER_ARM_COMPILER_6__
     // pre-init runs really early since we need it even for memcpy and divide!
     // (basically anything in aeabi that uses bootrom)
 
@@ -104,6 +107,7 @@ void runtime_init(void) {
     for (void (**p)(void) = &__preinit_array_start; p < &__preinit_array_end; ++p) {
         (*p)();
     }
+#endif
 
     // After calling preinit we have enough runtime to do the exciting maths
     // in clocks_init
@@ -165,6 +169,7 @@ void runtime_init(void) {
     irq_init_priorities();
     alarm_pool_init_default();
 
+#if !__IS_COMPILER_ARM_COMPILER_6__
     // Start and end points of the constructor list,
     // defined by the linker script.
     extern void (*__init_array_start)(void);
@@ -176,6 +181,7 @@ void runtime_init(void) {
     for (void (**p)(void) = &__init_array_start; p < &__init_array_end; ++p) {
         (*p)();
     }
+#endif
 
 }
 
@@ -189,6 +195,7 @@ void __attribute__((noreturn)) __attribute__((weak)) _exit(__unused int status)
 #endif
 }
 
+#if !__IS_COMPILER_ARM_COMPILER_6__
 __attribute__((weak)) void *_sbrk(int incr) {
     extern char end; /* Set by linker.  */
     static char *heap_end;
@@ -259,6 +266,7 @@ __attribute((weak)) int _kill(__unused pid_t pid, __unused int sig) {
 void exit(int status) {
     _exit(status);
 }
+#endif
 
 // incorrect warning from GCC 6
 GCC_Pragma("GCC diagnostic push")
diff --git a/src/rp2_common/pico_stdio/stdio.c b/src/rp2_common/pico_stdio/stdio.c
index 3656d2f..a78e000 100644
--- a/src/rp2_common/pico_stdio/stdio.c
+++ b/src/rp2_common/pico_stdio/stdio.c
@@ -136,6 +136,7 @@ static int stdio_get_until(char *buf, int len, absolute_time_t until) {
     } while (true);
 }
 
+#if !__IS_COMPILER_ARM_COMPILER_6__
 int WRAPPER_FUNC(putchar)(int c) {
     char cc = (char)c;
     stdio_put_string(&cc, 1, false, false);
@@ -148,6 +149,7 @@ int WRAPPER_FUNC(puts)(const char *s) {
     stdio_flush();
     return len;
 }
+#endif
 
 int putchar_raw(int c) {
     char cc = (char)c;
@@ -301,6 +303,7 @@ bool stdio_init_all(void) {
     return rc;
 }
 
+#if !__IS_COMPILER_ARM_COMPILER_6__
 int WRAPPER_FUNC(getchar)(void) {
     char buf[1];
     int len = stdio_get_until(buf, 1, at_the_end_of_time);
@@ -308,6 +311,7 @@ int WRAPPER_FUNC(getchar)(void) {
     assert(len == 1);
     return (uint8_t)buf[0];
 }
+#endif
 
 int getchar_timeout_us(uint32_t timeout_us) {
     char buf[1];
